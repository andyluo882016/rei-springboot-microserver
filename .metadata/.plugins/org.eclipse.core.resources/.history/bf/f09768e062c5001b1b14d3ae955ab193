package com.example.demo.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import com.example.demo.module.*;

import reactor.core.publisher.Mono;

//import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
//import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
//import com.netflix.hystrix.contrib.javanica.annotation.HystrixProperty;
import java.util.*;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

@Service
@Scope("request")
public class InventoryManager {

	@Autowired
	RestTemplate restTemplate;
	
	@Autowired
	WebClient webclient;
	
       public ResponseEntity<Item[]> getAlls() {
		
        String url="http://producet-inventory-server/inventory/getalls";
		
		HttpHeaders headers = new HttpHeaders();
	    headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
	   
	    headers.set("REI-COM-PERSIST", "True");
	    headers.set("REI-COM-LOCATION", "USA-WA");
	  
		  HttpEntity<Item[]> entity = new HttpEntity<Item[]>(headers);
		  
		 ResponseEntity<Item[]> response = restTemplate.exchange(url, HttpMethod.GET, entity, Item[].class);
		 
		 return response;
		  
	}
       
    public Mono<Store> getStoresNearBy() {
    	//http://localhost:8803/store/findbylocation/SEATTLE
    	final String url="http://local-store/store/findbylocation";
    	webclient.get()
    	.uri(url)
    	.accept(MediaType.ALL)
    	 .retrieve()
         .onStatus(HttpStatus::is4xxClientError, clientResponse ->
          Mono.error(new MessageOfException(" 404 unsported exception"))
         )
          .onStatus(HttpStatus::is5xxServerError, clientResponse ->
           Mono.error(new MessageOfException(" 505 server exception"))
         )
        .bodyToMono(Customer.class).map(customer -> ResponseEntity.ok(customer))
        .defaultIfEmpty(ResponseEntity.notFound().build());
    }
}
