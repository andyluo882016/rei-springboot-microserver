package com.example.demo.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.example.demo.services.*;
import java.util.*;
import java.util.stream.Collectors;

import com.example.demo.module.*;
@RestController
@RequestMapping("/store")
public class StoreController {
    @Autowired
	LocalStoreService LocalStoreService;
    @GetMapping(path="/findalls", produces=MediaType.APPLICATION_JSON_VALUE)
    public List<Store> findAlls() {
    	
    	return LocalStoreService.findAllstores();
    }
    @GetMapping(path="/findbylocation/{location}", produces=MediaType.APPLICATION_JSON_VALUE)
    public List<Store> findNearStoreByLocation(@PathVariable("location") final String location) {
    	
    	  List<Store> list= LocalStoreService.findAllstores();
    	  
    	 return list.stream().filter(sl ->(sl.getLocation().getName()).equalsIgnoreCase(location)).collect(Collectors.toList());
    	  
    }
    @GetMapping(path="/findbynameloc/{name}")
    public List<Store> findByNameAndLocation(@PathVariable("name") final String name){
    	Location location = new Location("CHARLOTTE", "NC");
    	List<Store> list= LocalStoreService.findAllstores();
    	
    	return list.stream().filter(lc ->lc.getLocation().equals(location) && lc.getName().equalsIgnoreCase(name)).collect(Collectors.toList());
    	     
    }
    @PostMapping(path="/addStore", consumes=MediaType.APPLICATION_JSON_VALUE, produces=MediaType.APPLICATION_JSON_VALUE)
    public Store saveone(@RequestBody Store store) {
    	 
    	 return LocalStoreService.addStore(store);
    }
    @DeleteMapping(path="/delete/{id}")
    public String deleteOneById(@PathVariable("id") final String id) {
    
    	LocalStoreService.deleteOneById(id);
    	
    	return "The Store with : "+id +" has beed deleted";
    }
    @PutMapping(path="/update", consumes=MediaType.APPLICATION_JSON_VALUE)
    public String updateOneStore(@RequestBody Store store) {
    
    	LocalStoreService.updatestore(store);
    	
    	return "The Store with : "+ store.getId() +" has beed updated";
    }
}
